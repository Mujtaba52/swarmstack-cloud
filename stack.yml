version: "3.8"

services:
  traefik:
    image: traefik:v3.0
    command:
      - "--configFile=/etc/traefik/traefik.toml"
    ports:
      - "8080:80"    # Changed to avoid conflict
      - "8443:443"   # Optional: changed HTTPS as well
    volumes:
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - ./traefik/dynamic_conf.toml:/etc/traefik/dynamic_conf.toml:ro
      - ./traefik/certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"

  auth:
    image: swarmstack-cloud-auth:latest
    networks:
      - app-network
    environment:
      - PORT=3001
      - JWT_SECRET=secret
    command: bun dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.localhost`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.services.auth.loadbalancer.server.port=3001"

  backend:
    image: swarmstack-cloud-backend:latest
    networks:
      - app-network
    environment:
      - PORT=3000
      - JWT_SECRET=secret
    command: npm run start
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"

  frontend:
    image: swarmstack-cloud-frontend:latest
    ports:
      - "5173:5173"
    networks:
      - app-network
    command: npm run dev -- --host
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  ai-microservice:
    image: swarmstack-cloud-ai-microservice:latest
    networks:
      - app-network
    command: python app.py
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai.rule=Host(`ai.localhost`)"
      - "traefik.http.routers.ai.entrypoints=websecure"
      - "traefik.http.routers.ai.tls=true"
      - "traefik.http.services.ai.loadbalancer.server.port=5000"

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: myappdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:

volumes:
  postgres_data:
